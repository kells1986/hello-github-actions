name: Multi-CICD

on:
  push

env:
  VERSION: dev

jobs:
  Change-Detection:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      base: ${{ steps.filter.outputs.base }}
      library: ${{ steps.filter.outputs.library }}
      consumer: ${{ steps.filter.outputs.consumer }}
    steps:
      # For pull requests it's not necessary to checkout the code
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            base:
              - 'components/base-images/**'
            library:
              - 'components/library/**'
            consumer:
              - 'components/consumer/**'

  # Build and Test the Library is the first, most important change
  # Downstream tasks should be blocked until this is done
  Build-Test-Library:
    needs: Change-Detection
    if: ${{ needs.Change-Detection.outputs.library == 'true' }}
    outputs:
      success: ${{ steps.libsignal.outputs.success }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - id: build
        name: Lib Update
        run: |
          LIBCHANGE=${{ needs.Change-Detection.outputs.library }}
          echo $LIBCHANGE
          if [ $LIBCHANGE=="true" ]; then
            cat components/library/data.txt
          else
            echo "Skipping Library Tests"
          fi

      - id: libsignal
        name: Lib Signal
        run: |
          if echo ${{ needs.Change-Detection.outputs.library }} | grep -c "true"
          then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success==skipped" >> $GITHUB_OUTPUT
          fi


  # Once the Library is tested it should be installed in the base image
  # Alternatively we could be changing dependencies / keys in the base image which we also want to trigger on
  Build-Test-Base:
    needs: 
      - Change-Detection
      - Build-Test-Library
    if: ${{ needs.Change-Detection.outputs.base == 'true' }} or ${{ needs.Build-Test-Library.libsignal.outputs.success == 'true' }}
    outputs:
      success: ${{ steps.basesignal.outputs.success }} 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - id: 'cat'
        run: |
          if echo ${{ needs.Change-Detection.outputs.base }} | grep -c "true" || echo ${{ needs.Build-Test-Library.libsignal.outputs.success }} | grep -c true
          then
            cat components/library/data.txt
          else
            echo "Skipping Base Build"
          fi
      - id: 'basesignal'
        run: |
          if echo ${{ needs.Change-Detection.outputs.base }} | grep -c "true" || echo ${{ needs.Build-Test-Library.libsignal.outputs.success }} | grep -c true
          then
            echo "success=true" >> $GITHUB_OUTPUT 
          else
            echo "success=skipped" >> $GITHUB_OUTPUT 
          fi


  # This should trigger in 3 ways:
  # 1. Changes to the code
  # 2. Changes to the library
  # 3. Changes to the base image
  # Changes 2 and 3 are covered by the signal from a successful base image build
  Build-Test-Consumer:
    needs: 
      - Change-Detection
      - Build-Test-Base
    if: ${{ needs.Change-Detection.outputs.consumer == 'true' }} or ${{ needs.Build-Test-Base.basesignal.outputs.success == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - id: 'cat'
        run: cat components/consumer/data.txt
    